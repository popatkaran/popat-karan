{
  "key": "spryker",
  "platform": "Spryker",
  "banner": "../../images/platforms/banner-spryker.png",
  "tagline": "Spryker is a modern cloud-native platform-as-a-service solution that enables companies to create winning transactional business models in B2B, Enterprise Marketplaces, Unified Commerce and B2C. It is headless, API-based, enterprise-ready and flexible. It is also scalable and easy to customize. According to TrustRadius, Spryker is a flexible, easy customizable, and scalable eCommerce solution that builds a strong base which helps standardize processes. Gartner ranks Spryker as #1 for Composable Commerce in the 2022 Critical Capabilities for Digital Commerce report.",
  "about": "Spryker is a modern cloud-native platform-as-a-service solution that enables companies to create winning transactional business models in B2B, Enterprise Marketplaces, Unified Commerce and B2C. It is headless, API-based, enterprise-ready and flexible. It is also scalable and easy to customize. According to TrustRadius, Spryker is a flexible, easy customizable, and scalable eCommerce solution that builds a strong base which helps standardize processes. Gartner ranks Spryker as #1 for Composable Commerce in the 2022 Critical Capabilities for Digital Commerce report.",
  "why": "This is a placeholder for description about why to use Spryker.",
  "features": [
    {
      "title": "Modular Architecture for Agile Development",
      "description": "Spryker's modular architecture is based on the Symfony framework, providing developers with a robust foundation and a wide range of Symfony bundles that can be leveraged for rapid development and seamless integration of custom functionalities."
    },
    {
      "title": "Headless Commerce for Flexible Front-End Experiences",
      "description": "Spryker provides a comprehensive set of APIs and SDKs that enable easy integration with any front-end system, including web, mobile, IoT, voice assistants, and more. This headless commerce architecture ensures flexibility in creating immersive and personalized experiences for customers."
    },
    {
      "title": "Cloud-Native Architecture for Scalability and Efficiency",
      "description": "Spryker's cloud-native architecture is supported by containerization technologies like Docker, enabling easy deployment, management, and scaling of Spryker instances. Additionally, the platform integrates with cloud services, such as AWS Elastic Beanstalk and Google Kubernetes Engine, to streamline infrastructure management and maximize scalability."
    },
    {
      "title": "Extensible Architecture for Seamless Integration",
      "description": "Spryker offers a wide range of integrations, including payment gateways, ERP systems, CRM platforms, and marketing tools. The platform's integration framework and API-based approach simplify the process of connecting external systems, ensuring smooth data exchange and enhanced business operations. Additionally, Spryker provides a marketplace of pre-built modules and extensions that can be leveraged to accelerate development and reduce time to market."
    }
  ],
  "arch_description": "Spryker architecture is designed with two main application layers that are separated from each other: frontend and backend. This architecture allows any storefront application to connect with the back office application easily. Spryker is a Commerce Operating System, mainly composed of several applications such as Storefront (Yves), Back Office (Zed), and Storefront API (Glue). Storefront is the frontend presentation layer for customers provided by Yves Application Layer based on Symfony Components. The backend application is responsible for managing the business logic and data storage. It is built using Zed Application Layer based on Symfony Components. The Storefront API (Glue) is responsible for providing a RESTful API for the storefront application. It is built using the Silex micro-framework. This architecture allows Spryker to be highly modular and flexible. It also allows businesses to easily customize their storefront application without affecting the backend application.",
  "arch_image": "../../images/platforms/arch-spryker.png",
  "benefits": [
    {
      "title": "benefit - 1",
      "description": "This is a placeholder of Spryker benefit 1."
    },
    {
      "title": "benefit - 2",
      "description": "This is a placeholder of Spryker benefit 2."
    },
    {
      "title": "benefit - 3",
      "description": "This is a placeholder of Spryker benefit 3."
    },
    {
      "title": "benefit - 4",
      "description": "This is a placeholder of Spryker benefit 4."
    }
  ],
  "why_me": [
    {
      "title": "reason - 1",
      "description": "Reson 1 why me."
    },
    {
      "title": "reason - 2",
      "description": "Reson 2 why me."
    },
    {
      "title": "reason - 3",
      "description": "Reson 3 why me."
    },
    {
      "title": "reason - 4",
      "description": "Reson 4 why me."
    }
  ]
}